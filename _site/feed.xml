<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cater's blog</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 04 Jul 2019 22:51:56 +0800</pubDate>
    <lastBuildDate>Thu, 04 Jul 2019 22:51:56 +0800</lastBuildDate>
    <generator>Jekyll v3.5.0</generator>
    
      <item>
        <title>浅谈TCP</title>
        <description>&lt;p&gt;TCP是互联网最重要的协议之一，是一种面向连接的、可靠的、基于字节流的传输层通信协议。文章主要介绍TCP协议的特点与目的，同时从TCP保证传输可靠的几个重要方面展开。
&lt;!-- more --&gt;&lt;/p&gt;

&lt;h1 id=&quot;一综述&quot;&gt;一、综述&lt;/h1&gt;

&lt;p&gt;TCP(Transmission Control Protocol 传输控制协议)，位于ISO七层协议的传输层（第四层），是一种面向链接、基于字节流的通信协议，通过检验和、序列号、确认应答、重发控制
、连接管理和窗口控制等机制提供可靠性服务。
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/tcpHeader.png&quot; alt=&quot;TCP首部&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;二连接管理&quot;&gt;二、连接管理&lt;/h1&gt;
&lt;p&gt;TCP提供面向连接的通信传输，在数据通信开始前必须先做好通信两端的准备工作，通过三次握手建立连接。同时结束通信的时候，也需要两端断开，四次挥手断开连接。所以一个连接的建立与断开，正常过程需要来回发送7个包才能完成。&lt;/p&gt;

&lt;h4 id=&quot;三次握手&quot;&gt;&lt;strong&gt;三次握手&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;一般情况，TCP中发送第一个SYN包的一方称为客户端，接受这个包的一方称为服务端。
在连接建立的时候，客户端首先向服务器发送SYN包请求建立连接，服务端接收到包后，向客服端发送ACK和SYN包，确认准备好连接的同时向客户端发出连接请求，最后客户端接收到包后向服务端发送ACK确认应答，连接正式建立。
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/shakeHands.png&quot; alt=&quot;TCP三次握手&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;四次挥手&quot;&gt;&lt;strong&gt;四次挥手&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;连接的一方（一般为客户端）再没有数据发送的时候释放连接，向服务端发送FIN包，服务端收到之后，向客户端发送ACK应答包，此时只是表明客户端不在发送数据，但可能接受服务端发送的数据。当服务端也没有数据发送的时候，同样发客户端发送FIN包，最后客户端接受到之后，返回ACK应答包，至此，连接断开。
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/wave.png&quot; alt=&quot;TCP四次挥手&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;三序列号与确认应答&quot;&gt;三、序列号与确认应答&lt;/h1&gt;
&lt;p&gt;序列号是按照顺序给发送数据的每一个字节(8bit)都标上号码的编号，序列号的初始值并非为0，而是在建立连接之后由随机数声称，而后面的计算则是对每一字节加一。接受端查询接收数据TCP首部中的序列号和数据的长度，将自己下一步应该接收的序号作为确认应答返送回去。&lt;/p&gt;

&lt;p&gt;在TCP发送数据过程中，发送数据的一方在TCP报文首部加入了序列号，如2712239079。接收端接收到数据后，向发送端返回确认应答号，这个号码为发送的序列号＋已经数据长度，表明下一个应该接受的字节为***。同时将TCP首部中的确认位(ACK)置为1，表明这个包是一个确认应答。
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/tcpack_1.png&quot; alt=&quot;TCP确认应答&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;以下是TCP发送与接收数据截图：
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/tcpack_2.png&quot; alt=&quot;TCP确认应答&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;我们注意看序列号和确认号的值！该数据包中，序列号为2712239079，确认号为1288781509，这和三次握手的第三步的数据包中的序列号和确认号相同。
从上图中看出这个数据包的大小为1018字节，其中减去14字节Ethernet报头，20字节的IP报头，20字节的TCP报头和4字节的FCS （1018-14-20-20-4=960），得到传输的数据大小为1432。我们将该数据包中的序列号加上该数据大小（即2712239079+960 =2712240039），发现与“下一个序列号”的值完全吻合，也就是下一个数据包中服务器发送给客户端的数据包中的确认号，如下图所示。
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/tcpack_3.png&quot; alt=&quot;TCP确认应答&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;四超时重发&quot;&gt;四、超时重发&lt;/h1&gt;
&lt;p&gt;TCP数据发送端在发送数据的时候，把该数据包加入到超时重发队列里面，同时启动重发计时器，如果在规定时间内，没有收到接受端的确认应答，则重发数据包。理想情况下的重发时间，应该满足随着网络情况的不同而变化，在高速的LAN中时间相对端，而在长距离通信或者网络拥堵的时候重发时间较长。&lt;/p&gt;

&lt;p&gt;为保证能在不同网络环境下都提供高性能通信，TCP在每次发包的时候都会计算往返时间(RTT Round Trip Time)及其偏差(RTT时间波动的值、方差，也称为抖动)，然后根据RTT及其方差使用自适应算法(这里不展开算法详情)去重新计算重发时间，重发时间需要比RTT平均值大。&lt;/p&gt;

&lt;p&gt;偏差的最小值为0.5秒，在Unix和Windows中，超时都以0.5秒为单位，重发超时都是0.5秒的整数倍。在最初的数据包发送中，不知道往返时间，一般重发超时设置为6s。当数据重发之后，等待确认应答的时间将以2倍，4倍的指数式增长。重发达到一定次数后，如果还没有收到任何确认应答，就会判断为网络异常，强制关闭连接，并通知应用通信异常强行终止。&lt;/p&gt;

&lt;h1 id=&quot;五以段为单位发送数据&quot;&gt;五、以段为单位发送数据&lt;/h1&gt;
&lt;p&gt;在建立TCP连接的同时，也确定发送数据包的单位，称为“最大消息长度”(MSS: Maximum Segment Size)。最理想的情况时，最大消息长度正好是IP中不会被分片处理的最大数据长度。TCP在发送数据时，以MSS的大小将数据进行分割发送，重发时也以MSS为单位。&lt;/p&gt;

&lt;p&gt;在三次握手时，双方会在TCP首部写入MSS选项，告诉对方自己的接口能够适应的MSS大小。然后在两者间选择较小者的值投入使用。如果缺省，可以选IP包长度不超过576字节的值(IP首部20字节，TCP首部20字节，MSS 536字节)
	注意：为附加mSS选项，TCP首部将不再是20字节，而是4的整数倍(一般多加4字节).
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/mss.png&quot; alt=&quot;mss&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;六窗口控制与快重传&quot;&gt;六、窗口控制与快重传&lt;/h1&gt;
&lt;p&gt;TCP以1个段为单位，每发一个段进行一次应答，这样的传输导致包的往返时间越长通信性能越低。因此引入窗口概念提高性能，计时在往返时间较长情况下，也能控制网络性能的下降。发送端主机在发送一个段以后不必再一直等待确认应答，而是继续发送，直到窗口大小限制。&lt;/p&gt;

&lt;p&gt;窗口大小就是指无需等待确认应答而可以继续发送数据的最大值，如图窗口大小为4个段。这个机制实现通过使用大量的缓冲区，通常是在内存开辟一部分空间，作为缓冲区存放已经发送但未收到确认应答的数据。&lt;/p&gt;

&lt;p&gt;窗口控制使用滑动形式，如下图圈起的部分，窗口内的数据&lt;/p&gt;

&lt;h1 id=&quot;七流控制&quot;&gt;七、流控制&lt;/h1&gt;

&lt;h1 id=&quot;八拥塞控制&quot;&gt;八、拥塞控制&lt;/h1&gt;

&lt;h1 id=&quot;九提高网络利用率的规范&quot;&gt;九、提高网络利用率的规范&lt;/h1&gt;
</description>
        <pubDate>Wed, 15 Jun 2016 16:05:56 +0800</pubDate>
        <link>http://localhost:4000/2016/06/15/%E8%BD%BB%E8%B0%88TCP</link>
        <guid isPermaLink="true">http://localhost:4000/2016/06/15/%E8%BD%BB%E8%B0%88TCP</guid>
        
        <category>technology</category>
        
        
        <category>study-network</category>
        
      </item>
    
      <item>
        <title>Git基础</title>
        <description>&lt;p&gt;Git是当今最为先进的分布式版本控制系统之一，当前国内大部分互联网都在使用。一直以来，我都是皮毛式地使用Git，到实习了才发现这Git，只要你身处互联网，是不得不熟悉啊！难得抽出点时间，好好总结一下Git常用的命令的用法。
&lt;!-- more --&gt;&lt;/p&gt;

&lt;h1 id=&quot;一git基础&quot;&gt;一、Git基础&lt;/h1&gt;

&lt;h4 id=&quot;三个工作区域&quot;&gt;&lt;strong&gt;三个工作区域&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Git中有三个工作区域：工作区（Working directory）、暂存区（staging directory）和仓库（Git directory）。一般工作流程：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在工作区添加或修改文件，状态：已修改(modified)&lt;/li&gt;
  &lt;li&gt;使用git add命令添加到暂存去，状态：已暂存(staged)&lt;/li&gt;
  &lt;li&gt;使用git commit命令添加到仓库，状态：已提交(commited)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;工作区就是我们平时写代码的目录，当我们修改文件后通过git add以快照的形式暂存在暂存区中，暂存区域只不过是个简单的文件,一般都放在 git 目录中。仓库则是Git最重要的部分，以数据链的形式不同的commit对象。并且只有一个HEAD指针指向正在工作的分支。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://marklodato.github.io/visual-git-guide/conventions.svg&quot; alt=&quot;Git 仓库&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;文件保存&quot;&gt;&lt;strong&gt;文件保存&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Git区别于其他版本控制系统，Git只关心数据的整体是否变化，而大多数其他系统则关心文件内容的具体差异。这类系统（CVS）等每次纪录有哪些文件做了更新，以及都更新了哪些行的内容。而Git并不保存这些前后变化的差异数据，只对变化的文件作快照后，记录在一个微型的文件系统中，若文件没有变化，则对上次保存的快照作一链接。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;https://git-scm.com/book/en/v2/book/01-introduction/images/snapshots.png&quot; alt=&quot;Git 文件保存&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;二基本用法&quot;&gt;二、基本用法&lt;/h1&gt;

&lt;h4 id=&quot;文件在工作区间的转换&quot;&gt;&lt;strong&gt;文件在工作区间的转换&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://marklodato.github.io/visual-git-guide/basic-usage.svg&quot; alt=&quot;Git 工作区间的转换&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以上的四条命令在工作区、暂存区（也叫索引）和仓库间转换（文件快照）。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;git add files: 把当前修改的文件加入到暂存区&lt;/li&gt;
  &lt;li&gt;git commit -m “描述内容”: 把暂存区的内容提交到仓库&lt;/li&gt;
  &lt;li&gt;git reset -- files: 撤销暂存区文件，用来撤销git add操作&lt;/li&gt;
  &lt;li&gt;git checkout -- files: 把文件从暂存区府复制到工作区，用来丢弃本地修改（没有add到暂存区）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;也可以跳过暂存区直接从工作区提交文件到仓库或反之。
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;https://marklodato.github.io/visual-git-guide/basic-usage-2.svg&quot; alt=&quot;Git 工作区间的转换&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;git commit -a -m “描述内容”: 相当于git add ＋ git commit －m&lt;/li&gt;
  &lt;li&gt;git checkout HEAD – files: 把仓库HEAD指向的快照复制到暂存区和工作区&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;三命令详解&quot;&gt;三、命令详解&lt;/h1&gt;

&lt;h4 id=&quot;基础状态&quot;&gt;&lt;strong&gt;基础状态&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://marklodato.github.io/visual-git-guide/conventions.svg&quot; alt=&quot;Git 文件目录&quot; /&gt;
&lt;br /&gt;
下面命令以上图为基础，绿色的5位字符表示提交的ID，分别指向父节点。分支用橘色显示，分别指向特定的提交。当前分支由附在其上的HEAD标识。 这张图片里显示最后5次提交，ed489是最新提交。 master分支指向此次提交，另一个maint分支指向祖父提交节点。&lt;/p&gt;

&lt;h4 id=&quot;diff&quot;&gt;&lt;strong&gt;diff&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://marklodato.github.io/visual-git-guide/diff.svg&quot; alt=&quot;Git diff&quot; /&gt;
&lt;br /&gt;
使用git diff 可以查看工作区与暂存区，暂存区与仓库，两次提交间的不同，加文件名可以指定文件的不同。&lt;/p&gt;

&lt;h4 id=&quot;commit&quot;&gt;&lt;strong&gt;commit&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;提交时，git用暂存区域的文件创建一个新的提交，并把此时的节点设为父节点。然后把当前分支指向新的提交节点。下图中，当前分支是master。 在运行命令之前，master指向ed489，提交后，master指向新的节点f0cec并以ed489作为父节点。
&lt;img src=&quot;https://marklodato.github.io/visual-git-guide/commit-master.svg&quot; alt=&quot;Git commit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果想更改一次提交，使用 git commit –amend。git会使用与当前提交相同的父节点进行一次新提交，旧的提交会被取消。
&lt;img src=&quot;https://marklodato.github.io/visual-git-guide/commit-amend.svg&quot; alt=&quot;Git commit&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;checkout&quot;&gt;&lt;strong&gt;Checkout&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;‘git checkout’ 命令多用于切换分支或者从历史提交（或者暂存区域）中拷贝文件到工作区（或者也拷贝到暂存区）
当给定某个文件名（或者打开-p选项，或者文件名和-p选项同时打开）时，git会从指定的提交中拷贝文件到暂存区域和工作目录。比如，git checkout HEAD~ foo.c会将提交节点HEAD~(即当前提交节点的父节点)中的foo.c复制到工作目录并且加到暂存区域中。（如果命令中没有指定提交节点，则会从暂存区域中拷贝内容。）注意当前分支不会发生变化。
&lt;img src=&quot;https://marklodato.github.io/visual-git-guide/checkout-files.svg&quot; alt=&quot;Git checkout拷贝文件&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当不指定文件名，而是给出一个（本地）分支时，那么HEAD标识会移动到那个分支（也就是说，我们“切换”到那个分支了），然后暂存区域和工作目录中的内容会和HEAD对应的提交节点一致。新提交节点（下图中的a47c3）中的所有文件都会被复制（到暂存区域和工作目录中）；只存在于老的提交节点（ed489）中的文件会被删除；不属于上述两者的文件会被忽略，不受影响。
&lt;img src=&quot;https://marklodato.github.io/visual-git-guide/checkout-branch.svg&quot; alt=&quot;Git checkout切换分支&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果既没有指定文件名，也没有指定分支名，而是一个标签、远程分支、SHA-1值或者是像master~3类似的东西，就得到一个匿名分支，称作detached HEAD（被分离的HEAD标识）。这样可以很方便地在历史版本之间互相切换。比如说你想要编译1.6.6.1版本的git，你可以运行git checkout v1.6.6.1（这是一个标签，而非分支名），编译，安装，然后切换回另一个分支，比如说git checkout master。然而，当提交操作涉及到“分离的HEAD”时，其行为会略有不同，详情见在下面。
&lt;img src=&quot;https://marklodato.github.io/visual-git-guide/checkout-detached.svg&quot; alt=&quot;Git checkout匿名分支&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;reset&quot;&gt;&lt;strong&gt;reset&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;reset命令把当前分支指向另一个位置，并且有选择的变动工作目录和索引。也用来在从历史仓库中复制文件到索引(暂存区)，而不动工作目录。
如果不给选项，那么当前分支指向到那个提交。如果用&lt;code class=&quot;highlighter-rouge&quot;&gt;--hard&lt;/code&gt;选项，那么工作目录也更新，如果用–soft选项，那么都不变。
&lt;img src=&quot;https://marklodato.github.io/visual-git-guide/reset-commit.svg&quot; alt=&quot;Git reset改变HEAD指向和暂存区&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果没有给出提交点的版本号，那么默认用HEAD。这样，分支指向不变，但是索引会回滚到最后一次提交，如果用–hard选项，工作目录也同样。
&lt;img src=&quot;https://marklodato.github.io/visual-git-guide/reset.svg&quot; alt=&quot;Git reset改变HEAD指向和暂存区&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果给了文件名(或者 -p选项), 那么工作效果和带文件名的checkout差不多，除了索引被更新。
&lt;img src=&quot;https://marklodato.github.io/visual-git-guide/reset-files.svg&quot; alt=&quot;Git reset改变HEAD指向和暂存区&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;merge&quot;&gt;&lt;strong&gt;merge&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;merge 命令把不同分支合并起来。合并前，索引必须和当前提交相同。如果另一个分支是当前提交的祖父节点，那么合并命令将什么也不做。 另一种情况是如果当前提交是另一个分支的祖父节点，就导致fast-forward合并。指向只是简单的移动，并生成一个新的提交。
&lt;img src=&quot;https://marklodato.github.io/visual-git-guide/merge-ff.svg&quot; alt=&quot;Git merge&quot; /&gt;&lt;/p&gt;

&lt;p&gt;否则就是一次真正的合并。默认把当前提交(ed489 如下所示)和另一个提交(33104)以及他们的共同祖父节点(b325c)进行一次三方合并。结果是先保存当前目录和索引，然后和父节点33104一起做一次新提交。
&lt;img src=&quot;https://marklodato.github.io/visual-git-guide/merge.svg&quot; alt=&quot;Git merge&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;cherry-pick&quot;&gt;&lt;strong&gt;cherry Pick&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;cherry-pick命令&lt;code class=&quot;highlighter-rouge&quot;&gt;复制&lt;/code&gt;一个提交节点并在当前分支做一次完全一样的新提交。
&lt;img src=&quot;https://marklodato.github.io/visual-git-guide/cherry-pick.svg&quot; alt=&quot;Git cherry－pick&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;rebase&quot;&gt;&lt;strong&gt;rebase&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;衍合是合并命令的另一种选择。合并把两个父分支合并进行一次提交，提交历史不是线性的。衍合在当前分支上重演另一个分支的历史，提交历史是线性的。 本质上，这是线性化的自动的 cherry-pick
&lt;img src=&quot;https://marklodato.github.io/visual-git-guide/rebase.svg&quot; alt=&quot;Git cherry－pick&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上面的命令都在topic分支中进行，而不是master分支，在master分支上重演，并且把分支指向新的节点。注意旧提交没有被引用，将被回收。
要限制回滚范围，使用–onto选项。下面的命令在master分支上重演当前分支从169a6以来的最近几个提交，即2c33a。
&lt;img src=&quot;https://marklodato.github.io/visual-git-guide/rebase-onto.svg&quot; alt=&quot;Git cherry－pick&quot; /&gt;&lt;/p&gt;

&lt;p&gt;引自－&lt;a href=&quot;https://marklodato.github.io/visual-git-guide/index-zh-cn.html&quot;&gt;图解Git&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Jun 2016 19:05:56 +0800</pubDate>
        <link>http://localhost:4000/2016/06/10/Git%E5%9F%BA%E7%A1%80</link>
        <guid isPermaLink="true">http://localhost:4000/2016/06/10/Git%E5%9F%BA%E7%A1%80</guid>
        
        <category>technology</category>
        
        
        <category>study-git</category>
        
      </item>
    
      <item>
        <title>MySQL学习笔记</title>
        <description>&lt;style&gt;
	table {
		width: 100%;
		border: 1px solid #dddddd;
		border-collapse: collapse;
		margin-bottom: 20px;
	}
	th, td {
		border: 1px solid #dddddd;
		padding: 5px;
		font-size: 0.8rem;
		text-align: center;
	}
&lt;/style&gt;

&lt;p&gt;数据库作为数据的存储，在软件系统中占据着不可替代的作用，而数据存储的速度在某种程度上决定了数据交互的速率。本人多次使用MySQL数据库却一直没有去对它进行比较深入的了解，这段时间趁着有时间，把MySQL的知识学习了一下，希望以后能够写些高效一点的SQL语句。&lt;!-- more --&gt;&lt;/p&gt;

&lt;h1 id=&quot;一基本操作&quot;&gt;一、基本操作&lt;/h1&gt;

&lt;h4 id=&quot;检索不同的列&quot;&gt;&lt;strong&gt;检索不同的列&lt;/strong&gt;&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select distinct vend_id from products;     
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;限制结果&quot;&gt;&lt;strong&gt;限制结果&lt;/strong&gt;&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select distinct vend_id from products limit 5;    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;limit 3,5 返回从行3开始的5行，第一个数为开始位置，第二个数为要检索的行数。默认一个数检索出来的第一行为行0而不是行1，因此limit 1,1将要检索出第二行而不是第一行。
limit 4 offset 3，从行3开始的4行＝＝limit 3,4。&lt;/p&gt;

&lt;h4 id=&quot;排序order-by&quot;&gt;&lt;strong&gt;排序(order by)&lt;/strong&gt;&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select prod_name from products order by prod_name;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;降序：desc 升序：asc
关于位置：order by子句应该保证出现在from子句之后，如果使用where的时候，order by需要位于where 之后，如果使用limit，limit必须位于order by之后，否则将产生错误信息.&lt;/p&gt;

&lt;h4 id=&quot;where子句过滤信息&quot;&gt;&lt;strong&gt;where子句过滤信息&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;空值检查：is null/is not null&lt;/p&gt;

&lt;p&gt;IN操作符：制定条件范围&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select prod_name,prod_price   
from products
where vend_id IN (1002,1003);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;NOT操作符：否定之后所跟的任何条件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select prod_name,prod_price   
from products   
where vend_id NOT IN (1002,1003)   
order by prod_name;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;计算次序&quot;&gt;&lt;strong&gt;计算次序&lt;/strong&gt;&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select prod_name,prod_price
from products
where vend_id = 1002 OR vend_id = 1003 And prod_price &amp;gt;= 10;   
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;结果发现返回的结果中🈶出现小于10美元的数据。原因是SQL(像多数语言一样)在处理OR操作符前，优先处理AND操作符。上述SQL语句应该理解为供应商1003制造的任何价格为10美元或以上的产品，或者是由供应商1002制造的任何产品，而不管价格如何。&lt;/p&gt;

&lt;h1 id=&quot;二匹配搜索&quot;&gt;二、匹配搜索&lt;/h1&gt;

&lt;h4 id=&quot;like操作符&quot;&gt;&lt;strong&gt;Like操作符&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;由字面值、通配符或两者组合构成搜索条件。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select prod_id,prod_name
from products
where prod_name Like '%anvil%';   
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;搜索区分大小写&lt;/li&gt;
  &lt;li&gt;注意去掉为空格，否则会出现匹配不正确&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;%可以匹配任何东西，但NULL除外&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;where prod_name like ‘%’;   //不能匹配值为NULL的长产品行。
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;下划线_操作符&quot;&gt;&lt;strong&gt;下划线(_)操作符&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;下划线的用途和%类似，但下划线只能匹配单个字符，不能多也不能少，而不是任意个字符。&lt;/p&gt;

&lt;h4 id=&quot;使用通配符的技巧&quot;&gt;&lt;strong&gt;使用通配符的技巧&lt;/strong&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;不要过度使用通配符。如果其他操作符能达到相同的目的，应该使用其他操作符。&lt;/li&gt;
  &lt;li&gt;在确定需要使用通配符时，除非绝对有必要，否则不要把它们用在搜索模式的开始处。把通配符置于搜索模式的开始处，搜索起来是最慢的。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;正则表达式regexp匹配&quot;&gt;&lt;strong&gt;正则表达式REGEXP匹配&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;以下例子检索列包含prod_name包含文本1000的所有行。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select prod_name
from products
where prod_name REGEXP '1000'
order by prod_name;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;’.’匹配任意一个字符&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;匹配不区分大小写,为了区分大小写，可以使用BINARY关键字&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;where prod_name REGEXP BINARY 'JetPack .000';  
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;OR匹配&lt;/strong&gt;&lt;br /&gt;
	‘|’相当于OR条件，例如：‘1000｜2000｜3000’ &lt;br /&gt;
&lt;strong&gt;匹配几个字符之一&lt;/strong&gt; &lt;br /&gt;
使用’[ ]’匹配几个字符之一，［123］为［1｜2｜3］的缩写。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;匹配范围&lt;/strong&gt; &lt;br /&gt;
使用［0-9］代替［0123456789］，［a-z］任意字母字符&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;匹配特殊字符&lt;/strong&gt; &lt;br /&gt;
需要匹配’.’等特殊字符的时候需要使用’\.’进行匹配。包括’.’、’|’、’[‘、’]’、’'都需要同样处理。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;元字符&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;\\f&lt;/td&gt;
      &lt;td&gt;换页&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\\n&lt;/td&gt;
      &lt;td&gt;换行&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\\r&lt;/td&gt;
      &lt;td&gt;回车&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\\t&lt;/td&gt;
      &lt;td&gt;制表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;\\v&lt;/td&gt;
      &lt;td&gt;纵向制表&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;匹配字符类&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;类&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[:alnum:]&lt;/td&gt;
      &lt;td&gt;任意字母和数字（同[a-zA-Z0-9]）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[:alpha:]&lt;/td&gt;
      &lt;td&gt;任意字符（同[a-zA-Z]）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[:blank:]&lt;/td&gt;
      &lt;td&gt;空格和制表符同（[\\t]）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[:cntrl:]&lt;/td&gt;
      &lt;td&gt;ASCII控制字符（ASCII0到31和127）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[:digit:]&lt;/td&gt;
      &lt;td&gt;任意数字（同[0-9]）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[:graph:]&lt;/td&gt;
      &lt;td&gt;与[:print:]相同，但不包括空格）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[:lower:]&lt;/td&gt;
      &lt;td&gt;任意消小写字母（同[a-z]）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[:print:]&lt;/td&gt;
      &lt;td&gt;任意可打印字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[:punct:]&lt;/td&gt;
      &lt;td&gt;既不在[:alnum:]又不在[:cntrl:]中的任意字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[:space:]&lt;/td&gt;
      &lt;td&gt;包括空格在内的任意空白字符（同[\\f\\n\\r\\t\\v]）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[:upper:]&lt;/td&gt;
      &lt;td&gt;任意大写字母（同[A-Z]）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[:xdigit:]&lt;/td&gt;
      &lt;td&gt;任意十六进制数字（同[a-fA－F0-9]）&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;定位符&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;元字符&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;^&lt;/td&gt;
      &lt;td&gt;文本的开始&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;$&lt;/td&gt;
      &lt;td&gt;文本的结尾&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[ [:&amp;lt;:] ]&lt;/td&gt;
      &lt;td&gt;词的开始&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[ [:&amp;gt;:] ]&lt;/td&gt;
      &lt;td&gt;词的结尾&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;^的双重用途，在集合中[ ] ,用来否定该集合，否则，用来指串的开始。&lt;/li&gt;
  &lt;li&gt;REGEXP总是返回0（没有匹配）或者1（匹配）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;匹配多个实例&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;元字符&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;*&lt;/td&gt;
      &lt;td&gt;0个或多个匹配&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;+&lt;/td&gt;
      &lt;td&gt;1个或多个匹配（等于{1,}）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;?&lt;/td&gt;
      &lt;td&gt;0个或1个匹配（等于{0,1}）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;{n}&lt;/td&gt;
      &lt;td&gt;指定数目的匹配&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;{n,}&lt;/td&gt;
      &lt;td&gt;不少于指定数目的匹配&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;{n,m}&lt;/td&gt;
      &lt;td&gt;匹配数目的范围（m不超过255）&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;三数据处理函数&quot;&gt;三、数据处理函数&lt;/h1&gt;
&lt;p&gt;函数没有SQL的可移植性强，能使用其他方式实现最好不使用函数，使用函数的使用，应该保证做好代码注释。  &lt;br /&gt;
&lt;strong&gt;文本处理函数&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;函数&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Left(str,length)&lt;/td&gt;
      &lt;td&gt;返回串左边的字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Length()&lt;/td&gt;
      &lt;td&gt;返回串的长度&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Locate(substr,str,pos)&lt;/td&gt;
      &lt;td&gt;找出串的一个子串a在b中的位置，不存在返回0，第一个位置为1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Lower()&lt;/td&gt;
      &lt;td&gt;将串转换为小写&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LTrim()&lt;/td&gt;
      &lt;td&gt;去掉串左边的空格&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Right(str,length)&lt;/td&gt;
      &lt;td&gt;返回串右边的字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RTrim()&lt;/td&gt;
      &lt;td&gt;去掉串右边的空格&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Soundex()&lt;/td&gt;
      &lt;td&gt;返回串的SOUNDEX值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SubString(str,pos,length)&lt;/td&gt;
      &lt;td&gt;返回子串的字符,length可以省略&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Upper()&lt;/td&gt;
      &lt;td&gt;将串转换为大写&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;soundex()的使用例子： 可以搜到鱼Y Lie同音的Y Lee&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select cust_name,cust_contact
from customers
where Soundex(cust_contact) = Soundex('Y Lie');
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;日期和时间处理函数&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;函数&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;AddDate()&lt;/td&gt;
      &lt;td&gt;增加一个日期(天,周等)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AddTime()&lt;/td&gt;
      &lt;td&gt;增加一个时间(时,分等)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CurDate()&lt;/td&gt;
      &lt;td&gt;返回当前日期&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CurTime()&lt;/td&gt;
      &lt;td&gt;返回当前时间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Date()&lt;/td&gt;
      &lt;td&gt;返回日期时间的日期部分&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DateDiff()&lt;/td&gt;
      &lt;td&gt;计算两个日期之差&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Date_Add(date,INTERVAL expr type)&lt;/td&gt;
      &lt;td&gt;高度灵活的日期运算函数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Date_Format(date,format)&lt;/td&gt;
      &lt;td&gt;返回一个格式化的日期或时间串&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Day()&lt;/td&gt;
      &lt;td&gt;返回一个日期的天数部分&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DayOfWeek()&lt;/td&gt;
      &lt;td&gt;对于一个日期，返回对应的星期几,1=星期天&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Hour()&lt;/td&gt;
      &lt;td&gt;返回一个时间的小时部分&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Minute()&lt;/td&gt;
      &lt;td&gt;返回一个时间的分钟部分&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Month()&lt;/td&gt;
      &lt;td&gt;返回一个日期的月份部分&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Now()&lt;/td&gt;
      &lt;td&gt;返回当前的时间日期&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Second()&lt;/td&gt;
      &lt;td&gt;返回时间的秒部分&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Time()&lt;/td&gt;
      &lt;td&gt;返回一个日期的时间部分&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Year()&lt;/td&gt;
      &lt;td&gt;返回一个日期的年份部分&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; &lt;br /&gt;
日期date的数据类型如果为datetime，这时候如果存储的值为2016-03－15 16:30:05则&lt;code class=&quot;highlighter-rouge&quot;&gt;where order_date ='2016-03-15'&lt;/code&gt;会出现检索失败。可以使用日期函数，或者使用范围替代。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;数值处理函数&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;函数&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Abs()&lt;/td&gt;
      &lt;td&gt;返回一个数的绝对值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Floor(x)&lt;/td&gt;
      &lt;td&gt;返回小于或等于x的最大整数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Ceil(x)&lt;/td&gt;
      &lt;td&gt;返回大雨或等于x的最小整数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Round(x)&lt;/td&gt;
      &lt;td&gt;返回离x最近的整数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Round(x,y)&lt;/td&gt;
      &lt;td&gt;保留x小数点后y位的值，但截断时要进行四舍五入&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cos()&lt;/td&gt;
      &lt;td&gt;返回一个角度的余弦&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Exp(x)&lt;/td&gt;
      &lt;td&gt;返回e的x次方&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Pow(x,y)&lt;/td&gt;
      &lt;td&gt;返回x的y次方,y可以为负数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Mod(x,y)&lt;/td&gt;
      &lt;td&gt;返回x除以y后的余数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Pi()&lt;/td&gt;
      &lt;td&gt;返回圆周率&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Rand()&lt;/td&gt;
      &lt;td&gt;返回一个随机数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Sin()&lt;/td&gt;
      &lt;td&gt;返回一个角度的正弦&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Sqrt()&lt;/td&gt;
      &lt;td&gt;返回一个数的平方根&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Tan()&lt;/td&gt;
      &lt;td&gt;返回一个角度的正切&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;四分组与汇总&quot;&gt;四、分组与汇总&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;聚集函数&lt;/strong&gt; &lt;br /&gt;
Avg()、Count()、Max()、Min()、Sum()  &lt;br /&gt;
Avg()只能用来确定特定数值列的平均值，直接忽略NULL值的行 &lt;br /&gt;
其他几个函数也忽略NULL值 &lt;br /&gt;
&lt;strong&gt;注意:&lt;/strong&gt; &lt;br /&gt;
ALL为默认的行为，如果只包含不同的值使用DISTINCT参数&lt;code class=&quot;highlighter-rouge&quot;&gt;Avg(DISTINCT price)&lt;/code&gt;，不能使用Count(DISTINCT).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;分组&lt;/strong&gt; &lt;br /&gt;
	select vend_id,count(*) as num_prods
	from products
	group by vend_id; &lt;br /&gt;
&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果分组中有NULL值，则NULL将作为一个分组返回。&lt;/li&gt;
  &lt;li&gt;Group By子句必须出现在Where子句之后，Order By子句之前。&lt;/li&gt;
  &lt;li&gt;Group By只能使用选择列或表达式列，而且必须使用每个选择列表达式。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;过滤子句使用Having，而不用where，where过滤基于特定行，having基于分组。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select vend_id,Count(*) as num_prods
from products
where prod_price &amp;gt;= 10
group by vend_id
having count(*) &amp;gt;= 2;   
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;五子查询&quot;&gt;五、子查询&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;待续。。。&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;六联结与组合查询&quot;&gt;六、联结与组合查询&lt;/h1&gt;

&lt;h1 id=&quot;七视图&quot;&gt;七、视图&lt;/h1&gt;

&lt;h1 id=&quot;八存储过程&quot;&gt;八、存储过程&lt;/h1&gt;

&lt;h1 id=&quot;九游标&quot;&gt;九、游标&lt;/h1&gt;

&lt;h1 id=&quot;十触发器&quot;&gt;十、触发器&lt;/h1&gt;

&lt;h1 id=&quot;十一事务管理&quot;&gt;十一、事务管理&lt;/h1&gt;

&lt;h1 id=&quot;十二性能优化&quot;&gt;十二、性能优化&lt;/h1&gt;

</description>
        <pubDate>Tue, 15 Mar 2016 21:05:56 +0800</pubDate>
        <link>http://localhost:4000/2016/03/15/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0</link>
        <guid isPermaLink="true">http://localhost:4000/2016/03/15/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0</guid>
        
        <category>technology</category>
        
        
        <category>study-database</category>
        
      </item>
    
      <item>
        <title>我也有自己的独立博客啦！</title>
        <description>&lt;p&gt;多少次说过自己也要弄个&lt;code class=&quot;highlighter-rouge&quot;&gt;独立博客&lt;/code&gt;，今天终于做到了。这并不是多困难的事情，如果认真去完成，也就是最多几天的事情，却一直没有完成，惭愧。每个人或多或少都有过自己去做一些属于自己的东西的想法，但多少次都只是停留在想法的层面，然后就没有了然后。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;执行力&lt;/code&gt;是一个多么重要的一步，却一次一次被忽略了，我和大部分一样，曾经以为只要有了想法，再去思考过程中的困难，如果可以解决，那么一切都不再是问题，就可以顺利完成事情了。但一次次之后，都只是空白一片，成果呢？没有。今天纪念一下独立博客完成，也以此提醒自己要重视执行力，没有了执行力，一切都将只是空想。&lt;/p&gt;

</description>
        <pubDate>Wed, 30 Dec 2015 21:05:56 +0800</pubDate>
        <link>http://localhost:4000/2015/12/30/%E6%88%91%E4%B9%9F%E6%9C%89%E8%87%AA%E5%B7%B1%E7%9A%84%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E5%95%A6</link>
        <guid isPermaLink="true">http://localhost:4000/2015/12/30/%E6%88%91%E4%B9%9F%E6%9C%89%E8%87%AA%E5%B7%B1%E7%9A%84%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E5%95%A6</guid>
        
        <category>happy</category>
        
        
        <category>mood</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Tue, 29 Dec 2015 16:05:56 +0800</pubDate>
        <link>http://localhost:4000/2015/12/29/welcome-to-jekyll</link>
        <guid isPermaLink="true">http://localhost:4000/2015/12/29/welcome-to-jekyll</guid>
        
        <category>jekyll</category>
        
        
        <category>study-jekyll</category>
        
      </item>
    
  </channel>
</rss>
